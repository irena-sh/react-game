{"version":3,"sources":["fetchMode.js","App.js","index.js"],"names":["fetchMode","a","fetch","then","res","json","result","catch","error","alert","message","App","useState","mode","setModes","currentMode","setCurrentMode","fields","setFields","field","start","setStart","useEffect","data","Object","keys","map","n","i","name","handleHover","event","item","target","num","Number","dataset","fill","id","className","onChange","index","options","selectedIndex","value","length","element","disabled","type","onClick","Array","hover","data-item","onMouseEnter","filter","e","Math","trunc","ReactDOM","render","document","getElementById"],"mappings":"mNAAaA,EAAS,uCAAG,sBAAAC,EAAA,sEACVC,MAAM,oCAChBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAM,OAAIA,KACfC,OAAM,SAAAC,GAAK,OAAIC,MAAMD,EAAME,YAJP,mFAAH,qD,OC6FPC,MA1Ff,WACE,MAAyBC,mBAAS,IAAlC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAA4BJ,mBAAS,IAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAA0BN,mBAAS,CACjCO,MAAO,IADT,mBAAOC,EAAP,KAAcC,EAAd,KAIAC,qBAAU,WACRtB,IAAYG,MAAK,SAAAU,GACf,IAAMU,EAAOC,OAAOC,KAAKZ,GAAMa,KAAI,SAACC,EAAGC,GACrC,MAAO,CACLC,KAAMF,EACNR,MAAON,EAAKc,GAAGR,UAInBL,EAASS,QAEV,IAEH,IAmBMO,EAAc,SAACC,GACnB,IAAMC,EAAOD,EAAME,OACbC,EAAMC,OAAOH,EAAKI,QAAQJ,MAC1BT,EAAI,YAAON,GAEjBM,EAAKW,GAAO,CAAEG,MAAOd,EAAKW,GAAKG,KAAMC,GAAIJ,GACzChB,EAAUK,IAGZ,OACE,yBAASgB,UAAU,MAAnB,SACE,sBAAKA,UAAU,YAAf,UACE,uDACA,sBAAKA,UAAU,cAAf,UACE,yBAAQC,SAjCS,SAACT,GACxB,IAAMU,EAAQV,EAAME,OAAOS,QAAQC,cAC7BC,EAAQ,CACZf,KAAgB,IAAVY,EAAc,OAAS5B,EAAK4B,EAAQ,GAAGZ,KAC7CV,MAAiB,IAAVsB,EAAc,EAAI5B,EAAK4B,EAAQ,GAAGtB,OAG3CE,EAASuB,IA0BH,UACE,wBAAsBA,MAAM,IAA5B,sBAAY,WACX/B,EAAKgC,OAAS,GACbhC,EAAKa,KAAI,SAACoB,EAASlB,GAAV,OAAgB,wBAAQgB,MAAOE,EAAQjB,KAAvB,SAAsCiB,EAAQjB,MAAZD,SAG/D,wBAAQmB,SAAyB,SAAf3B,EAAMS,MAA0B,WAAYmB,KAAK,SAASC,QA7BhE,WAClB,IAAMhC,EAAwB,SAAfG,EAAMS,KACnBqB,MAAM9B,EAAMD,MAAQC,EAAMD,OAAOkB,KAAK,CAAEc,OAAO,IAC/C,GAEFjC,EAAUD,GACVD,EAAeI,IAuBT,sBAEF,sBAAKmB,UAAU,QAAf,UACE,qBAAKA,UAAS,gBAAWxB,EAAYc,MAArC,SACGZ,EAAO4B,OAAS,GACf5B,EAAOS,KAAI,SAACoB,EAASL,GAAV,OACT,qBAEEW,YAAWX,EACXY,aAAcvB,EACdS,UAAS,sBAAiC,IAAjBO,EAAQT,KAAgB,OAAS,KAJ5D,qBACqBI,SAQ3B,qBAAKF,UAAU,iBAAf,SACGtB,EAAO4B,OAAS,GACf5B,EAAOqC,QAAO,SAAAC,GAAC,OAAIA,EAAElB,QAAMX,KAAI,SAACoB,EAASL,GAAV,OAC7B,6CACUe,KAAKC,MAAMX,EAAQR,GAAKvB,EAAYI,OAAS,EADvD,gBACiE2B,EAAQR,GAAMvB,EAAYI,MAAQ,IADnG,eAAmBsB,kBC5EnCiB,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.9e4754e2.chunk.js","sourcesContent":["export const fetchMode = async () => {\r\n  return await fetch('https://demo1030918.mockable.io/')\r\n    .then(res => res.json())\r\n    .then(result => result)\r\n    .catch(error => alert(error.message))\r\n}\r\n","import { useEffect, useState } from \"react\";\nimport { fetchMode } from \"./fetchMode\";\n\nfunction App() {\n  const [mode, setModes] = useState([]);\n  const [currentMode, setCurrentMode] = useState([]);\n  const [fields, setFields] = useState([]);\n  const [start, setStart] = useState({\n    field: 0,\n  });\n\n  useEffect(() => {\n    fetchMode().then(mode => {\n      const data = Object.keys(mode).map((n, i) => { \n        return {\n          name: n,\n          field: mode[n].field,\n        }\n      })\n\n      setModes(data)\n    });\n  }, [])\n  \n  const handleSelectMode = (event) => {\n    const index = event.target.options.selectedIndex;\n    const value = {\n      name: index === 0 ? 'none' : mode[index - 1].name,\n      field: index === 0 ? 0 : mode[index - 1].field,\n    }\n\n    setStart(value)\n  }\n\n  const handleStart = () => {\n    const fields = start.name !== 'none' ?\n      Array(start.field * start.field).fill({ hover: false }) :\n      [];\n\n    setFields(fields);\n    setCurrentMode(start);\n  }\n\n  const handleHover = (event) => {\n    const item = event.target;\n    const num = Number(item.dataset.item);\n    const data = [...fields];\n\n    data[num] = { fill: !data[num].fill, id: num }\n    setFields(data)\n  }\n\n  return (\n    <section className=\"App\">\n      <div className=\"container\">\n        <h1>React Game With Hooks</h1>\n        <div className=\"select-mode\">\n          <select onChange={handleSelectMode}>\n            <option key=\"value-0\" value=\"0\">Pick mode</option>\n            {mode.length > 0 && (\n              mode.map((element, i) => <option value={element.name} key={i}>{element.name}</option>)\n            )}\n          </select>\n          <button disabled={start.name !== 'none' ? false : 'disabled'} type=\"button\" onClick={handleStart}>START</button>\n        </div>\n        <div className=\"stats\">\n          <div className={`board ${currentMode.name}`}>\n            {fields.length > 0 && (\n              fields.map((element, index) =>\n                <div\n                  key={`board-item-${index}`}\n                  data-item={index}\n                  onMouseEnter={handleHover}\n                  className={`board-item ${element.fill === true ? 'blue' : ''}`}>  \n                </div>\n              )\n            )}\n          </div>\n          <div className=\"selected-items\">\n            {fields.length > 0 && (\n              fields.filter(e => e.fill).map((element, index) =>\n                <span key={`span-${index}`}>\n                  {`row-${Math.trunc(element.id / currentMode.field) + 1} col-${(element.id) % currentMode.field + 1}`}\n                </span>\n              )\n            )}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.scss';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}